#!/bin/bash
# ProtocolPilot Installation Script (Fixed Version)

# Configuration
APP_REPO_URL="https://github.com/Blacknuno/studio.git"
APP_DIR_NAME="protocolpilot"
INSTALL_PATH="$HOME/$APP_DIR_NAME"
DEFAULT_USER="admin"
DEFAULT_PASS=$(openssl rand -base64 12) # Generate random password

set -e

echo "🚀 Starting ProtocolPilot Installation..."

# --- Helper Functions ---
show_step() {
    echo ""
    echo "------------------------------------"
    echo "➡️  $1"
    echo "------------------------------------"
}

# --- Fix npm path for sudo ---
fix_npm_path() {
    if ! sudo npm -v &> /dev/null; then
        echo "Configuring npm path for sudo..."
        if command -v npm &> /dev/null && command -v node &> /dev/null; then
            sudo ln -sf "$(which npm)" /usr/local/bin/npm
            sudo ln -sf "$(which node)" /usr/local/bin/node
            export PATH="$PATH:/usr/local/bin" # For current session
            echo "npm and node links created in /usr/local/bin"
        else
            echo "⚠️ WARNING: npm or node not found in user PATH. Sudo npm might fail."
        fi
    else
        echo "npm path for sudo seems OK."
    fi
}

# --- System Preparation ---
show_step "System Preparation"
sudo apt update
sudo apt install -y git curl wget

# --- Node.js Installation ---
if ! command -v node &> /dev/null; then
    show_step "Installing Node.js (LTS)"
    # Using Nodesource is generally more reliable than older distro versions
    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
    sudo apt-get install -y nodejs
else
    echo "Node.js is already installed: $(node -v)"
fi

# --- npm Fix (Run after Node.js ensures npm is available) ---
fix_npm_path

# --- PM2 Installation ---
show_step "Installing PM2 globally"
if sudo npm install -g pm2; then
    echo "✅ PM2 installed successfully."
else
    echo "⚠️ PM2 installation failed. Please check npm/Node.js setup."
    exit 1
fi


# --- Application Setup ---
show_step "Cloning Repository: $APP_REPO_URL"
if [ -d "$INSTALL_PATH" ]; then
    echo "Removing existing application directory: $INSTALL_PATH"
    sudo rm -rf "$INSTALL_PATH"
fi
if git clone "$APP_REPO_URL" "$INSTALL_PATH"; then
    echo "✅ Repository cloned successfully to $INSTALL_PATH"
else
    echo "⚠️ Failed to clone repository. Please check URL and network."
    exit 1
fi

cd "$INSTALL_PATH"
echo "Changed directory to $(pwd)"

# Create environment file with real system data
SERVER_IP=$(hostname -I | awk '{print $1}')
# Ensure .env file has correct permissions if needed, though typically app reads it.
show_step "Creating .env file"
cat > .env <<EOL
# This file is automatically generated by install.sh
# For frontend, these are typically build-time or server-side rendered.
# For this prototype, it serves as a reference for what the server provides.
# The Next.js app itself does not directly read this .env file in production by default
# without specific configuration (e.g. NEXT_PUBLIC_ prefix or custom server).

# Information for the admin:
PANEL_LOGIN_PORT=3000
PANEL_ADMIN_USER=$DEFAULT_USER
PANEL_ADMIN_PASS=$DEFAULT_PASS
SERVER_PUBLIC_IP=$SERVER_IP

# Variables for potential future backend use or if app is configured to read them
# NEXT_PUBLIC_REAL_IP=$SERVER_IP
# NEXT_PUBLIC_PORT=3000
EOL
echo ".env file created."
cat .env # Show content for verification

show_step "Installing Application Dependencies (npm install)"
if npm install; then
    echo "✅ Application dependencies installed."
else
    echo "⚠️ Failed to install application dependencies."
    exit 1
fi

show_step "Building ProtocolPilot application (npm run build)"
if npm run build; then
    echo "✅ Application built successfully."
else
    echo "⚠️ Failed to build application."
    exit 1
fi

show_step "Setting up ProtocolPilot with PM2"
# Ensure PM2 can find Node.js, path might be an issue with sudo
# The `fix_npm_path` should help, but direct path to pm2 can be more robust if needed
PM2_CMD=$(command -v pm2 || echo "/usr/local/bin/pm2") # Fallback if not in sudo path but linked

if $PM2_CMD list | grep -q "$APP_DIR_NAME"; then
    echo "Application '$APP_DIR_NAME' is already managed by PM2. Restarting..."
    $PM2_CMD restart "$APP_DIR_NAME" --update-env
else
    echo "Starting application '$APP_DIR_NAME' with PM2..."
    # The `npm start` script in package.json is `next start` (which uses port 3000 by default)
    $PM2_CMD start npm --name "$APP_DIR_NAME" -- run start
fi
$PM2_CMD save # Save current process list
# Setup PM2 to start on boot
# The output of this command needs to be run by the user if it doesn't run automatically
# It usually prints a command like: sudo env PATH=$PATH:/usr/bin /usr/local/bin/pm2 startup systemd -u youruser --hp /home/youruser
echo "Configuring PM2 to start on system boot..."
PM2_STARTUP_CMD_OUTPUT=$($PM2_CMD startup systemd -u "$(whoami)" --hp "$HOME" | grep 'sudo env PATH')
if [ -n "$PM2_STARTUP_CMD_OUTPUT" ]; then
    echo "Attempting to execute PM2 startup command automatically:"
    echo "$PM2_STARTUP_CMD_OUTPUT"
    PM2_EXEC_CMD=$(echo "$PM2_STARTUP_CMD_OUTPUT" | sed -n 's/.*\(sudo env PATH.*\)/\1/p')
    if [ -n "$PM2_EXEC_CMD" ]; then
        eval "$PM2_EXEC_CMD"
        echo "✅ PM2 startup command executed."
    else
        echo "⚠️ Could not parse PM2 startup command. You might need to run it manually from the output above."
    fi
else
    echo "⚠️ Could not automatically determine PM2 startup command. You may need to run '$PM2_CMD startup' manually."
fi


# --- Final Output ---
echo ""
echo "✅ ProtocolPilot Installation Completed Successfully!"
echo "---------------------------------------------------"
echo ""
echo "📋 Admin Credentials & Access Information:"
echo "   ---------------------------------------"
echo "   🌐 Panel URL: http://$SERVER_IP:3000/paneladmin"
echo "   👤 Username:   $DEFAULT_USER"
echo "   🔑 Password:   $DEFAULT_PASS"
echo ""
echo "   (The above password was randomly generated. Store it securely!)"
echo ""
echo "⚠️ Important Next Steps:"
echo "   -------------------"
echo "   1. Access the panel URL in your browser."
echo "   2. Log in with the username and password provided above."
echo "   3. IMMEDIATELY go to 'Panel Settings' and change the default admin username and password for security."
echo "   4. Review Nginx setup for reverse proxy and SSL (see INSTALL_UBUNTU.md or Nginx docs)."
echo ""
echo "   To check application status: $PM2_CMD list"
echo "   To view logs: $PM2_CMD logs $APP_DIR_NAME"
echo ""
echo "ℹ️ Note on System Metrics & Real Data:"
echo "   - The panel UI for system metrics (IP, CPU, RAM, Bandwidth) and user counts is mostly for display."
echo "   - True real-time data for CPU, RAM, and Bandwidth requires a backend agent or service on the server"
echo "     that the Next.js application can query. This script does not install such an agent."
echo "   - The IP address displayed on the login page info and in Panel Settings is derived from 'hostname -I'."
echo "   - User management now starts with an empty list. Users are added via the panel."
echo ""
echo "The application is set to run on port 3000. If you need to change this:"
echo "  - Modify the 'PORT=3000' line in $INSTALL_PATH/.env"
echo "  - Adjust your 'npm start' script in package.json if it specifies a port (-p flag)"
echo "  - Restart the application using: $PM2_CMD restart $APP_DIR_NAME"
echo "  - Update any reverse proxy (e.g., Nginx) configuration."

exit 0

    